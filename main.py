from androguard.core.bytecodes import dvm
from androguard.core.analysis import analysis
from androguard.misc import AnalyzeAPK, AnalyzeDex
from deepdiff import DeepDiff
import json,os
from androguard.core.analysis.analysis import ExternalMethod
import matplotlib.pyplot as plt
import networkx as nx
import argparse
from json import dumps, loads, JSONEncoder, JSONDecoder
import pickle
class PythonObjectEncoder(JSONEncoder):
    def default(self, obj):
        try:
            return {'_python_object': pickle.dumps(obj).decode('latin-1')}
        except pickle.PickleError:
            return super().default(obj)

def as_python_object(dct):
    if '_python_object' in dct:
        return pickle.loads(dct['_python_object'].encode('latin-1'))
    return dct

def analyze(apk_path):
    json_info = {}
    a,d,dx = AnalyzeAPK(apk_path)
    json_info["Name"] = a.get_app_name()
    json_info["is_signed"] = a.is_signed()
    #json_info["Certificate"] = a.get_certificate_der(a.get_signature_name())
    json_info["permissions"] = a.get_permissions()
    json_info["details_permission"] = a.get_details_permissions()
    json_info["activities"] = list(a.get_activities())
    json_info["files"] = list(a.get_files())
    #json_info["files_info"] = list(a.get_files_information())
    #son_info["files_types"] =  list(a.get_files_types())
    json_info["main"] = list(a.get_main_activities())
    #json_info["classes"] = [z.__dict__ for z in dx.get_classes()]

    #print(dx.get_classes())
    #print(a.get_files())
    #print(a.get_details_permissions())
    #print(a.get_activities())
    """
    CFG = nx.DiGraph()

    # Note: If you create the CFG from many classes at the same time, the drawing
    # will be a total mess...
    for m in dx.find_methods(classname="Lcom/vologhat/Loader;"):
        orig_method = m.get_method()
        print("Found Method --> {}".format(orig_method))
        # orig_method might be a ExternalMethod too...
        # so you can check it here also:
        if isinstance(orig_method, ExternalMethod):
            is_this_external = True
            # If this class is external, there will be very likely
            # no xref_to stored! If there is, it is probably a bug in androguard...
        else:
            is_this_external = False

        CFG.add_node(orig_method, external=is_this_external)

        for other_class, callee, offset in m.get_xref_to():
            if isinstance(callee, ExternalMethod):
                is_external = True
            else:
                is_external = False

            if callee not in CFG.node:
                CFG.add_node(callee, external=is_external)

            # As this is a DiGraph and we are not interested in duplicate edges,
            # check if the edge is already in the edge set.
            # If you need all calls, you probably want to check out MultiDiGraph
            if not CFG.has_edge(orig_method, callee):
                CFG.add_edge(orig_method, callee)
    plt.rcParams["figure.figsize"] = (30,18)

    nx.draw_networkx(CFG)
    plt.draw()
    plt.show()
    plt.savefig('teest.png')
    """


    return json_info

def dir_path(string):
    if os.path.isdir(string):
        return string
    else:
        raise NotADirectoryError(string)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('-n', '--names-list', nargs='+', default=[])
    parser.add_argument('--path', type=dir_path)

    args = parser.parse_args()

    #print(args.names-list)

    original = analyze("D:\\master\\TFM\\entretenimiento\\\disneyplus\\disneyplus_original.apk") 
    json2 = analyze("D:\\master\\TFM\\entretenimiento\\\disneyplus\\androforever\\Disney+-v2.3.2-rc1-Mod-AndroForever.com.apk")
    json3 = analyze("D:\\master\\TFM\\entretenimiento\\\disneyplus\\modyolo\\Disney_MOD.apk")
    json4 = analyze("D:\\master\\TFM\\entretenimiento\\\disneyplus\\apkmody\\Disney__2.5.0-rc1_2203010_dc181c.apk")
    json5 = analyze("D:\\master\\TFM\\entretenimiento\\\disneyplus\\apkdone\\Disney Plus_v1.16.0_mod_apkdone.com.apk")
    json6 = analyze("D:\\master\\TFM\\entretenimiento\\\disneyplus\\techbigs\\Disney-Plus-1.17.1-Mod-TechBigs.Com.apk")


    with open('original_disney.json', 'w') as outfile:
        json.dump(original, outfile)

    with open('output_androforever_disney.json', 'w') as outfile1:
        print(json2)
        json.dump(json2, outfile1)

    with open('output_mydyolo_disney.json', 'w') as outfile2:
        json.dump(json3, outfile2)

    with open('output_apkmody_disney.json', 'w') as outfile3:
        json.dump(json4, outfile3)

    with open('output_apkdone_disney.json', 'w') as outfile4:
        json.dump(json5, outfile4)

    with open('output_techbigs_disney.json', 'w') as outfile4:
        json.dump(json6, outfile4)

    print(original)
    print(json2)
    print(json3)
    print(json4)
    print(json5)


    output = DeepDiff(original, json2, ignore_order=True)
    output1 = DeepDiff(original, json3, ignore_order=True)
    output2 = DeepDiff(original, json4, ignore_order=True)
    output3 = DeepDiff(original, json5, ignore_order=True)
    output4 = DeepDiff(original, json6, ignore_order=True)


    #output2 = DeepDiff(json1, json3, ignore_order=True)
    with open('diff_androforever_disney.json', 'w') as outfile:
        json.dump(output.to_json(), outfile)

    with open('diff_mydyolo_disney.json', 'w') as outfile:
        json.dump(output1.to_json(), outfile)

    with open('diff_apkmody_disney.json', 'w') as outfile:
        json.dump(output2.to_json(), outfile)

    with open('diff_apkdone_disney.json', 'w') as outfile:
        json.dump(output3.to_json(), outfile)

    with open('diff_techbigs_disney.json', 'w') as outfile:
        json.dump(output3.to_json(), outfile)

    #with open('output_2.json', 'w') as outfile:
    #    json.dump(output2, outfile)
    print(output)
    #print(output2)


    #h, d, dx = AnalyzeDex("Minecraft-1.18.12.01.apk")
    #print(h)
    #print(d)
    #print(dx)