import hashlib
import requests
import json 


class VTAnalysis:
    def __init__(self, path, out_name):
        self.path = path
        self.out_name = out_name
        self.BLOCK_SIZE = 65536 # The size of each read from the file

    def get_hash(self):
        file_hash = hashlib.sha256() # Create the hash object, can use something other than `.sha256()` if you wish
        with open(file, 'rb') as f: # Open the file to read it's bytes
            fb = f.read(self.BLOCK_SIZE) # Read from the file. Take in the amount declared above
            while len(fb) > 0: # While there is still data being read from the file
                file_hash.update(fb) # Update the hash
                fb = f.read(self.BLOCK_SIZE) # Read the next block from the file
        return file_hash.hexdigest()

    def analyze(self):
        params = {'apikey': API_KEY, 'resource': self.get_hash()}
        headers = {"Accept-Encoding": "gzip, deflate","User-Agent" : "gzip"}
        response_dict={}
        try:
            response_dict = requests.get('https://www.virustotal.com/vtapi/v2/file/report', 
             params=params).json()

            print(response_dict)
            info = {}
            if response_dict.get("response_code") != None and response_dict.get("response_code") > 0:
                # Hashes
                info["md5"] = response_dict.get("md5")
                # AV matches
                info["positives"] = response_dict.get("positives")
                info["total"] = response_dict.get("total")
                with open(self.out_name, 'w') as outfile:
                    json.dump(response_dict, outfile)
            else:
                print("Not Found in VT")

        except Exception as e:
                print(e)
